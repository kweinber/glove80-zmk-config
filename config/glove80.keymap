/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers
#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

     hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap"; // from default https://zmk.dev/docs/behaviors/hold-tap
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;    // <---[[moderate duration]]
            quick-tap-ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-on-release;
      };

      hm_sft: homerow_mods_shift {
          flavor = "tap-preferred";
          tapping-term-ms = <150>;
          quick-tap-ms = <175>;                // repeat on tap-into-hold
//          require-prior-idle-ms = <150>;
          compatible = "zmk,behavior-hold-tap";
          label = "HOMEROW_MODS_LEFT";
          #binding-cells = <2>;
          bindings = <&kp>, <&kp>;
          hold-trigger-on-release;             // delay positional check until key-release
      };

      hm_rpi: homerow_mods_prior_idle {
          flavor = "tap-preferred";
          tapping-term-ms = <250>;
//          quick-tap-ms = <175>;                // repeat on tap-into-hold
          require-prior-idle-ms = <150>;
          compatible = "zmk,behavior-hold-tap";
          label = "HOMEROW_MODS_RPI";
          #binding-cells = <2>;
          bindings = <&kp>, <&kp>;
          hold-trigger-on-release;             // delay positional check until key-release
      };

      hm_alt: homerow_mods_alt {
          flavor = "tap-preferred";
          tapping-term-ms = <200>;
//          quick-tap-ms = <175>;                // repeat on tap-into-hold
          require-prior-idle-ms = <190>;
          compatible = "zmk,behavior-hold-tap";
          label = "HOMEROW_MODS_ALT";
          #binding-cells = <2>;
          bindings = <&kp>, <&kp>;
          hold-trigger-on-release;             // delay positional check until key-release
      };

    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    // Home row mods
    #define _F_SFT &hm LSHFT F  // Shift on index fingers
    #define _J_SFT &hm RSHFT J
    #define _HOME_SFT &hm LSHFT HOME  // Shift in traditional places
    #define _PG_UP_SFT &hm RSHFT PG_UP
    #define _D_CMD &hm_rpi LGUI D   // Command on middle fingers
    #define _K_CMD &hm_rpi RGUI K
    #define _V_CTL &hm_rpi LCTRL V  // Control on index down
    #define _M_CTL &hm_rpi RCTRL M
    #define _S_OPT &hm_alt LALT S   // Option on ring finger
    #define _L_OPT &hm_alt RALT L

    // MacOS shortcuts
    #define _1PASS &kp LG(BSLH)      // 1Password
    #define _APEX  &kp LC(UP)        // App expos√©
    #define _FQUIT &kp LA(LG(ESC))   // Force quit
    #define _MCTL  &kp LC(DOWN)      // Mission control
    #define _SCRNS &kp LG(LS(N4))    // Screenshot
    #define _EMOJI &kp LC(LG(SPACE)) // Emoji picker
    #define _NEXTS &kp LC(RIGHT)     // Next screen
    #define _PREVS &kp LC(LEFT)      // Previous screen


    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1  |  F2 |  F3   |  F4  |  F5  |                                                                |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =   |  1  |  2    |  3   |  4   |  5   |                                                  |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB |  Q  |  W    |  E   |  R   |  T   |                                                  |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC |  A  |  S    |  D   |  F   |  G   |                                                  |  H   |   J   |   K   |  L   |   ;   |   '  |
            // | SHFT |  Z  |  X    |  C   |  V   |  B   | LGUI  | LCTRL | HOME |  | PGUP  | RGUI  | RCTRL  |  N   |   M   |   ,   |  .   |   /   | SHFT |
            // | MAGIC|  `  | LALT  | LEFT | RIGHT|      | BSPC  | DEL   | END  |  | PGDN  | RET   | SPACE  |      |  UP   | DOWN  |  [   |   ]   | LOWER|

            bindings = <
            &kp F1         &kp F2   &kp F3      &kp F4      &kp F5                                                                                         &kp F6  &kp F7      &kp F8      &kp F9      &kp F10
            &kp EQUAL      &kp N1   &kp N2      &kp N3      &kp N4      &kp N5                                                                     &kp N6  &kp N7  &kp N8      &kp N9      &kp N0      &kp MINUS
            &kp TAB        &kp Q    &kp W       &kp E       &kp R       &kp T                                                                      &kp Y   &kp U   &kp I       &kp O       &kp P       &kp BSLH
            &kp ESC        &kp A    &kp S       _D_CMD      _F_SFT      &kp G                                                                      &kp H   _J_SFT  _K_CMD       &kp L      &kp SEMI    &kp SQT
            &kp LSHFT      &kp Z    &kp X       &kp C       _V_CTL      &kp B   &kp LGUI   &kp LCTRL   &layer_td   &kp PG_UP  &kp RGUI &kp RCTRL   &kp N   _M_CTL  &kp COMMA   &kp DOT     &kp FSLH    &kp RSHFT 
            &magic MAGIC 0 &kp GRAVE &kp LALT   &kp LEFT    &kp RIGHT           &kp BSPC   &kp DEL     &kp LSHFT   &kp PG_DN  &kp RET  &kp SPACE           &kp UP  &kp DOWN    &kp LBKT    &kp RBKT  &layer_td 
            >;
        };

        lower_layer {
            bindings = <
            &kp C_BRI_DN      &kp C_BRI_UP        &kp C_PREV      &kp C_NEXT      &kp C_PP                                                                                                           &kp C_MUTE   &kp C_VOL_DN &kp C_VOL_UP  &none           &kp PAUSE_BREAK
            &trans            &none               &none           &none           &none           &kp HOME                                                                              &kp LPAR     &kp KP_NUM   &kp KP_EQUAL &kp KP_DIVIDE &kp KP_MULTIPLY &kp PSCRN
            &trans            &none               &none           &kp UP          &none           &kp END                                                                               &kp RPAR     &kp KP_N7    &kp KP_N8    &kp KP_N9     &kp KP_MINUS    &kp SLCK
            &trans            &none               &kp LEFT        &kp DOWN        &kp RIGHT       &kp PG_UP                                                                             &kp PRCNT    &kp KP_N4    &kp KP_N5    &kp KP_N6     &kp KP_PLUS     &none
            &trans            &kp K_CMENU         &none           &kp F11         &kp F12         &kp PG_DN       &trans      &trans      &to DEFAULT &trans      &trans      &trans    &kp COMMA    &kp KP_N1    &kp KP_N2    &kp KP_N3     &kp KP_ENTER    &trans
            &trans            &kp CAPS            &kp INS         &kp F11         &kp F12                         &trans      &trans      &trans      &trans      &trans      &trans                 &kp KP_N0    &kp KP_N0    &kp KP_DOT    &kp KP_ENTER    &trans
            >;
        };

        magic_layer {
            bindings = <
            &bt BT_CLR        &none               &none           &none           &none                                                                                                           &none      &none      &none      &none      &bt BT_CLR_ALL
            &none             &none               &none           &none           &none           &none                                                                                &none      &none      &none      &none      &none      &none
            &none             &rgb_ug RGB_SPI     &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                                      &none      &none      &none      &none      &none      &none
            &bootloader       &rgb_ug RGB_SPD     &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                                      &none      &none      &none      &none      &none      &bootloader
            &sys_reset        &none               &none           &none           &none           &none           &bt_2     &bt_3     &none            &none     &none     &none       &none      &none      &none      &none      &none      &sys_reset
            &none             &none               &none           &none           &none                           &bt_0     &bt_1     &out OUT_USB     &none     &none     &none                  &none      &none      &none      &none      &to FACTORY_TEST
            >;
        };

        factory_test_layer {
            bindings = <
            &kp N0   &kp N6   &kp N2   &kp N8   &kp N4                                                                              &kp N4   &kp N8   &kp N2   &kp N6   &kp N0
            &kp N1   &kp N7   &kp N3   &kp N9   &kp N5   &kp N0                                                            &kp N0   &kp N5   &kp N9   &kp N3   &kp N7   &kp N1
            &kp N2   &kp N8   &kp N4   &kp N0   &kp N6   &kp N1                                                            &kp N1   &kp N6   &kp N0   &kp N4   &kp N8   &kp N2
            &kp N3   &kp N9   &kp N5   &kp N1   &kp N7   &kp N2                                                            &kp N2   &kp N7   &kp N1   &kp N5   &kp N9   &kp N3
            &kp N4   &kp N0   &kp N6   &kp N2   &kp N8   &kp N3   &kp N4   &kp N5   &kp N6      &kp N6   &kp N5   &kp N4   &kp N3   &kp N8   &kp N2   &kp N6   &kp N0   &kp N4
            &kp N5   &kp N1   &kp N7   &kp N3   &kp N9            &kp N7   &kp N8   &kp N9      &kp N9   &kp N8   &kp N7            &kp N9   &kp N3   &kp N7   &kp N1   &kp N5
            >;
        };
    };
};
